rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function groupInfo(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data;
    }
    function channelInfo(groupId, channelId) {
      return get(/databases/$(database)/documents/groups/$(groupId)/channels/$(channelId)).data;
    }
    function userPrivilege(groupId, userId) {
      return get(/databases/$(database)/documents/groups/$(groupId)/privileges/$(userId)).data.value;
    }

    function groupIsOpen(groupId) {
      return groupInfo(groupId).privileges.membership.open == true;
    }
    match /users/{userId} {
      allow read, create, update, delete: if request.auth.uid == userId;
      match /private/{anything=**} {
        allow read, write: if request.auth.uid == userId;
      }
      match /public/{anything=**} {
        allow read: if request.auth.uid != null;
        allow write: if request.auth.uid == userId;
      }
    }
		match /groupNames/{groupName} {
    	allow read;
      allow create: if request.auth.uid != null;
    }
		match /groups/{groupId} {
    	allow read;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null && exists(/databases/$(database)/documents/groups/$(groupId)/owners/$(request.auth.uid)); // TEMP
      allow delete: if request.auth.uid != null && exists(/databases/$(database)/documents/groups/$(groupId)/owners/$(request.auth.uid));
    }
		match /groups/{groupId}/members/{userId} {
    	allow read;
      allow create: if request.auth.uid == userId && groupIsOpen(groupId);
      allow create: if request.auth.uid == userId && exists(/databases/$(database)/documents/groups/$(groupId)/owners/$(userId));
      allow delete, update: if request.auth.uid == userId;
    }
    match /groups/{groupId}/members/{userId}/private/{itemId} {
      allow read, write: if request.auth.uid == userId;
    }
		match /groups/{groupId}/privileges/{userId} {
    	allow read;
    }
		match /groups/{groupId}/channels/{channelId} {
    	allow read;
      allow create: if request.auth.uid != null 
          && groupInfo(groupId).privileges.channel.create <= userPrivilege(groupId, request.auth.uid);
    }
		match /groups/{groupId}/channels/{channelId}/messages/{messageId} {
      allow read: if request.auth.uid != null 
          && channelInfo(groupId, channelId).read <= userPrivilege(groupId, request.auth.uid);
      allow write: if request.auth.uid != null 
          && channelInfo(groupId, channelId).write <= userPrivilege(groupId, request.auth.uid);
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}